// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebManageImage.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210913102655_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ảnh thiên nhiên"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ảnh chân dung"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ảnh động vật"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ảnh gợi cảm"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ảnh học sinh"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ảnh di sản"
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ImageStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeny")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Chó corgi đang chơi đùa ngoài vườn",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 48,
                            Name = "Chó Corgi",
                            Url = "../../assets/Img/chocogri.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 61
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Rừng nhiệt đới với những tán cây xanh mát đang phát triển vào mùa mưa",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 24,
                            Name = "Rừng nhiệt đới",
                            Url = "../../assets/Img/rungnhietdoi.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 36
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Cô gái miền tây trong chiếc áo bà ba thước tha",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 46,
                            Name = "Con gái miền tây",
                            Url = "../../assets/Img/congaimientay.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 55
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CommentCount = 5,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Vẻ mặt chú mèo trông ngây thơ khi đòi ăn",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 109,
                            Name = "Mèo",
                            Url = "../../assets/Img/meo.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 111
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Hoàng hôn đang buông xuống vào buổi chiều trông thật đẹp",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 27,
                            Name = "Hoàng hôn",
                            Url = "../../assets/Img/hoanghon.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 37
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Ảnh thẻ thời học sinh",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 0,
                            Name = "Ảnh thẻ",
                            Url = "../../assets/Img/anhthe.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Chim cánh cụt tập trung theo đàn nghỉ mát trên bờ biển",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 23,
                            Name = "Chim cánh cụt",
                            Url = "../../assets/Img/chimcanhcut.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 732
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Dòng sông quê em lúc nào cũng mênh mông con nước, cá tôm rất nhiều",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 54,
                            Name = "Dòng sông quê em",
                            Url = "../../assets/Img/dongsongqueem.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 77
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Cô gái nóng bỏng trong bộ bikini",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 299,
                            Name = "Bikini",
                            Url = "../../assets/Img/bikini.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 78
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Vịnh Hạ Long một địa danh là di sản văn hóa và kì quan thiên nhiên của Việt Nam",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 88,
                            Name = "Vịnh Hạ Long",
                            Url = "../../assets/Img/vinhhalong.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 134
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Vịnh Hạ Long một địa danh là di sản văn hóa và kì quan thiên nhiên của Việt Nam",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 18,
                            Name = "Sa mạc Sahara",
                            Url = "../../assets/Img/sahara.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 72
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            CommentCount = 0,
                            DateCreate = new DateTime(2021, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desciption = "Kim tự tháp một địa danh là di sản văn hóa và kì quan thiên nhiên của Việt Nam",
                            ImageStatus = true,
                            IsApproval = true,
                            IsDeny = false,
                            LikeCount = 30,
                            Name = "Kim tự tháp",
                            Url = "../../assets/Img/kimtuthap.jpeg",
                            UserName = "Ân Phạm",
                            ViewsCount = 45
                        });
                });

            modelBuilder.Entity("Entities.Models.Like", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3d247859-11f4-41cd-ba94-4e7ef522fdbe",
                            ConcurrencyStamp = "738cef5d-5204-4312-b3a6-6e99a4b17d7b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c4c95195-5446-4642-862b-ae4b54e18926",
                            ConcurrencyStamp = "abb29884-46ee-4a8c-a67a-d969b805cc95",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany("Comments")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Images")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Like", b =>
                {
                    b.HasOne("Entities.Models.Image", "Image")
                        .WithMany("Likes")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
